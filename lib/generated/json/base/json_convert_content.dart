// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:douban_topmovies/models/topic/topics_list_entity.dart';
import 'package:douban_topmovies/generated/json/topics_list_entity_helper.dart';
import 'package:douban_topmovies/models/topic/topic_detail_entity.dart';
import 'package:douban_topmovies/generated/json/topic_detail_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case TopicsListEntity:
				return topicsListEntityFromJson(data as TopicsListEntity, json) as T;
			case TopicsListData:
				return topicsListDataFromJson(data as TopicsListData, json) as T;
			case TopicsListDataTopic:
				return topicsListDataTopicFromJson(data as TopicsListDataTopic, json) as T;
			case TopicDetailEntity:
				return topicDetailEntityFromJson(data as TopicDetailEntity, json) as T;
			case TopicDetailData:
				return topicDetailDataFromJson(data as TopicDetailData, json) as T;
			case TopicDetailDataTopic:
				return topicDetailDataTopicFromJson(data as TopicDetailDataTopic, json) as T;
			case TopicDetailDataFile:
				return topicDetailDataFileFromJson(data as TopicDetailDataFile, json) as T;
			case TopicDetailDataTag:
				return topicDetailDataTagFromJson(data as TopicDetailDataTag, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TopicsListEntity:
				return topicsListEntityToJson(data as TopicsListEntity);
			case TopicsListData:
				return topicsListDataToJson(data as TopicsListData);
			case TopicsListDataTopic:
				return topicsListDataTopicToJson(data as TopicsListDataTopic);
			case TopicDetailEntity:
				return topicDetailEntityToJson(data as TopicDetailEntity);
			case TopicDetailData:
				return topicDetailDataToJson(data as TopicDetailData);
			case TopicDetailDataTopic:
				return topicDetailDataTopicToJson(data as TopicDetailDataTopic);
			case TopicDetailDataFile:
				return topicDetailDataFileToJson(data as TopicDetailDataFile);
			case TopicDetailDataTag:
				return topicDetailDataTagToJson(data as TopicDetailDataTag);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TopicsListEntity).toString()){
			return TopicsListEntity().fromJson(json);
		}	else if(type == (TopicsListData).toString()){
			return TopicsListData().fromJson(json);
		}	else if(type == (TopicsListDataTopic).toString()){
			return TopicsListDataTopic().fromJson(json);
		}	else if(type == (TopicDetailEntity).toString()){
			return TopicDetailEntity().fromJson(json);
		}	else if(type == (TopicDetailData).toString()){
			return TopicDetailData().fromJson(json);
		}	else if(type == (TopicDetailDataTopic).toString()){
			return TopicDetailDataTopic().fromJson(json);
		}	else if(type == (TopicDetailDataFile).toString()){
			return TopicDetailDataFile().fromJson(json);
		}	else if(type == (TopicDetailDataTag).toString()){
			return TopicDetailDataTag().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<TopicsListEntity>() is M){
			return data.map((e) => TopicsListEntity().fromJson(e)).toList() as M;
		}	else if(List<TopicsListData>() is M){
			return data.map((e) => TopicsListData().fromJson(e)).toList() as M;
		}	else if(List<TopicsListDataTopic>() is M){
			return data.map((e) => TopicsListDataTopic().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailEntity>() is M){
			return data.map((e) => TopicDetailEntity().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailData>() is M){
			return data.map((e) => TopicDetailData().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailDataTopic>() is M){
			return data.map((e) => TopicDetailDataTopic().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailDataFile>() is M){
			return data.map((e) => TopicDetailDataFile().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailDataTag>() is M){
			return data.map((e) => TopicDetailDataTag().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}